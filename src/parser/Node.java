package parser;

import lexer.Token;
import symbols.Type;

import java.util.ArrayList;
import java.util.List;

public class Node {
    private final Token token;
    private final List<Node> childs=new ArrayList();
    public Type type;//used for basic->int | float | .. store latest type information only,used for type checking
    public String addr="";//address that hold the value of the node.
    // addr can be a source program var name,a constant,a temporary name generated by compiler
    public String code="";//code generated so far
    public String next="_";//next instruction's label
    public String base="";//only for array type
    public Type subtype; //only for array type
    public String True="_"; //only for bool
    public String False="_";//only for bool
    public Node(Token token)
    {
        this.token=token;
    }

    public Token getToken() {
        return token;
    }

    public List<Node> getChilds() {
        return childs;
    }

    public void AddChildren(List<Node> children){
        this.childs.addAll(children);
    }

    @Override
    public java.lang.String toString() {
        return token.toString();
    }
}
